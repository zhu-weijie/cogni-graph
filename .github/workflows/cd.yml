name: Continuous Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    outputs:
      image: ${{ steps.build-image.outputs.image }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Fetch Secret and Deploy to EKS
        run: |
          OPENAI_KEY=$(aws secretsmanager get-secret-value --secret-id cogni-graph/openai --query SecretString --output text | jq -r .OPENAI_API_KEY)
          DB_PASS=$(aws secretsmanager get-secret-value --secret-id cogni-graph/db --query SecretString --output text | jq -r .password)
          kubectl create secret generic cogni-graph-secrets --from-literal=OPENAI_API_KEY="$OPENAI_KEY" --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic db-credentials --from-literal=password="$DB_PASS" --dry-run=client -o yaml | kubectl apply -f -

          kubectl kustomize k8s/overlays/production \
            | sed 's|image: .*|image: ${{ needs.build-and-push.outputs.image }}|g' \
            | kubectl apply -f -
